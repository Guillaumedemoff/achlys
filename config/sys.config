%% -*- mode: erlang;erlang-indent-level: 2;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=erlang et
[{achlys , [
    {gc_interval, 45000},
    {stress_interval, 3000},
    {initial_formation_delay, 20000},
    {formation_check_interval, 180000},

    {initial_task_lookup_delay, 20000},
    {task_lookup_interval, 20000},
    % {rejoin_interval, 600000},
    {workers,  #{
            clustering => true,
            cleaning => true,
            sensing => false
        }
    },
    {initial_tasks, venom},
    {streams,  #{
        pmod_nav => #{
            temperature => #{
                poll_interval => 60000,
                aggregation_trigger => 30
            },
            pressure => #{
                poll_interval => 60000,
                aggregation_trigger => 30
            }
        },
        pmod_als => #{
            light => #{
                poll_interval => 60000,
                aggregation_trigger => 30
            }
        }
    }},
    {boards, [
        achlys@my_grisp_board_1 ,
        achlys@my_grisp_board_2 ,
        achlys@my_grisp_board_3 ,
        achlys@my_grisp_board_4 ,
        achlys@my_grisp_board_5
    ]}
]} ,

{plumtree, [
    {broadcast_exchange_timer , 60000} ,
    {broadcast_mods, [lasp_plumtree_backend]}
]} ,

{partisan , [
    {peer_port, 27000},
    % {partisan_peer_service_manager , partisan_hyparview_peer_service_manager} ,
    % {partisan_peer_service_manager , partisan_default_peer_service_manager} ,
    {channels , [1]}
    % {min_active_size, 2},
    % {max_active_size, 4},
    % {max_passive_size, 10},
    % {arwl, 4},
    % {prwl, 10}
]} ,

{lasp , [
    {sync_dets_on_update , true} ,
    {membership , false} ,
    {storage_backend , lasp_ets_storage_backend} ,
    % {storage_backend , lasp_dets_storage_backend} ,
    % {mode , delta_based} ,
    {mode , state_based} ,
    {max_gc_counter , 10} ,
    {delta_mode_max_gc_counter , 10} ,
    {plumtree_peer_refresh_interval , 120000} ,
    {delta_interval , 15000}
]} ,

{kernel, [
    % The primary Logger configuration is a map with the following keys:
    %
    % level = logger:level() | all | none
    %
    %  Specifies the primary log level, that is,
    % log event that are equally or more severe than this level,
    % are forwarded to the primary filters. Less severe log events are immediately discarded.
    %
    % See section Log Level for a listing and description of possible log levels.
    %
    % The initial value of this option is set by the Kernel configuration parameter logger_level.
    % It is changed during runtime with logger:set_primary_config(level,Level).
    % {logger_level, error},
    % {logger, [
    %     %% Console logger
    %     {handler, default, logger_std_h,
    %        #{level => critical,
    %         % formatter => {logger_formatter , #{single_line => true}}}
    %        formatter => {logger_formatter , #{single_line => true, max_size => 1024}}}
    %     },
    %
    %     %% Disk logger for notice
    %     {handler, disk_log, logger_disk_log_h,
    %        #{config => #{
    %             file => "logger/error",
    %             type => wrap,
    %             max_no_files => 10,
    %             max_no_bytes => 1048576, % 10 x 1mb
    %             filesync_repeat_interval => 1000
    %          },
    %          level => error,
    %          formatter => {logger_formatter , #{single_line => true, max_size => 128}}}
    %     }
    % ]}
    {logger_level, info},
    {logger, [
        %% Console logger
        {handler, default, logger_std_h,
           #{level => info,
            formatter => {logger_formatter , #{single_line => true}}}
        }
    ]}
]},

{grisp , [
    {drivers , [
        {spi , grisp_spi_drv}
        % {gpio , grisp_gpio_drv}
    ]} ,
    {devices , [
        % {spi1 , pmod_nav}
        % {gpio , pmod_maxsonar},
        {spi1 , pmod_nav},
        {spi2 , pmod_als}
    ]}
]}].
